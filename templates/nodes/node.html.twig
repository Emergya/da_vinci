{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 *

 * Available variables:

 * - node: Full node entity.
 *     - id: The node ID.
 *     - bundle: The type of the node, for example, "page" or "article".
 *     - authorid: The user ID of the node author.
 *     - createdtime: Time the node was published formatted in Unix timestamp.
 *     - changedtime: Time the node was changed formatted in Unix timestamp.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all, or print a
 *   subset such as {{ content.field_example }}. 
 *   Use {{ content|without('field_example') }} to temporarily suppress the 
 *   printing of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact" view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element. The attributes.class 
 *   element may contain one or more of the following classes:
 *     - node: The current template type (also known as a "theming hook").
 *     - node--type-[type]: The current node type. For example, if the node is an
 *       "Article" it would result in "node--type-article". Note that the machine 
 *       name will often be in a short form of the human readable label.
 *     - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *       teaser would result in: "node--view-mode-teaser", and full:
 *       "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *     - node--promoted: Appears on nodes promoted to the front page.
 *     - node--sticky: Appears on nodes ordered above other non-sticky nodes
 *       in teaser listings.
 *     - node--unpublished: Appears on unpublished nodes visible only to site admins.
 * - title_attributes: Same as attributes, except applied to the main title tag that 
 *   appears in the template.
 * - content_attributes: Same as attributes, except applied to the main content 
 *   tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of the
 *   node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be displayed
 *   in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be displayed
 *   after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the node
 *   cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the current
 *    user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user is 
 *   an administrator.
 * Other variables:
 * - $node: Full node object. Contains data that may not be safe.
 * - $type: Node type, i.e. story, page, blog, etc.
 * - $comment_count: Number of comments attached to the node.
 * - $uid: User ID of the node author.
 * - $created: Time the node was published formatted in Unix timestamp.
 * - $classes_array: Array of html class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
 *   teaser listings.
 * - $id: Position of the node. Increments each time it's output.
 *
 * Node status variables:
 * - $view_mode: View mode, e.g. 'full', 'teaser'...
 * - $teaser: Flag for the teaser state (shortcut for $view_mode == 'teaser').
 * - $page: Flag for the full page state.
 * - $promote: Flag for front page promotion state.
 * - $sticky: Flags for sticky post setting.
 * - $status: Flag for published status.
 * - $comment: State of comment settings for the node.
 * - $readmore: Flags true if the teaser content of the node cannot hold the
 *   main body content.
 * - $is_front: Flags true when presented in the front page.
 * - $logged_in: Flags true when the current user is a logged-in member.
 * - $is_admin: Flags true when the current user is an administrator.
 *
 * Field variables: for each field instance attached to the node a corresponding
 * variable is defined, e.g. $node->body becomes $body. When needing to access
 * a field's raw values, developers/themers are strongly encouraged to use these
 * variables. Otherwise they will have to explicitly specify the desired field
 * language, e.g. $node->body['en'], thus overriding any language negotiation
 * rule that was previously applied.
 *
 * @see template_preprocess()
 * @see template_preprocess_node()
 * @see template_process()
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
   ]
%}
{%
  set content_classes = [
    'field',
    'field-name-field-image',
    'field-type-image',
    'field-label-hidden',
  ] 
%}
 <article id="node-{{ node.nid.value}}" {{ attributes.addClass(classes) }}>
    <header>

    {{ title_prefix }}
    {% if not page %}
      <h2 class="title" {{ title_attributes }}>
       <a href="{{ url }}">{{ label }}</a>
      </h2>
    {% endif %}

    {{ title_suffix }}

    {% if display_submitted %}
      <div class="submitted clearfix">
        <p>{{ 'Posted on'|t }} <strong>{{ date }}</strong>{{ 'by'|t }} <strong>{{ author_name }}</strong></p>
  {{ metadata }}
      </div>
    {% endif %}
 
    </header>
 
<div{{ content_attributes.addClass(content_classes) }}>
  {# Hide comments and links now, so that we can render them later. #}
  {{ content|without('links', 'comment', 'field_tags', 'body') }}

</div>
 <div class="content">
  {{ content|without('links', 'comment','field_image') }}
  </div>

  {% if content.links %}
    {{ content.links }}
  {% endif %}
  {{ content.comment }}

    
  </article>
